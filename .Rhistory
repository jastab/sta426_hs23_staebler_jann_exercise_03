rowSums(x>0); colSums(x)
rowSums(x>0); colSums(x)
rowSums(x); colSums(x)
rowSums(x); colSums(x)
rowSums(x); colSums(x)
rowSums(x); colSums(x)
x <- cbind(x1 = 2, x2 = c(4:1, 2:5))
x <- cbind(x1 = 2, x2 = c(4:1, 2:5))
rowSums(x); colSums(x)
rowSums(x>0); colSums(x)
x <- cbind(x1 = 2, x2 = c(4:1, 2:5))
rowSums(x>0); colSums(x)
x <- cbind(x1 = 2, x2 = c(4:1, 2:5));
x <- cbind(x1 = -2, x2 = c(4:1, 2:5))
rowSums(x>0); colSums(x)
x <- cbind(x1 = -2, x2 = c(4:1, 2:5))
rowSums(x>0); colSums(x)
x <- cbind(x1 = -2, x2 = c(4:1, 2:5))
rowSums(x1>0); colSums(x)
rowSums(x[1]>0); colSums(x)
rowSums(x[1,:]>0); colSums(x)
rowSums(select(x, x1)>0)
x <- data.frame(cbind(x1 = -2, x2 = c(4:1, 2:5)))
rowSums(select(x, x1)>0)
df_x_count <- df_x %>% mutate_all(<0)
x <- data.frame(cbind(x1 = -2, x2 = c(4:1, 2:5)))
rowSums(select(x, x1)>0)
x
xd <- x %>% mutate_all(log(.))
xd <- x %>% mutate_all(~log(.))
xd <- x %>% mutate_all(~ log(.))
x <- data.frame(cbind(x1 = 2, x2 = c(4:1, 2:5)))
xd
x <- data.frame(cbind(x1 = 2, x2 = c(4:1, 2:5)))
xd <- x %>% mutate_all(~ log(.))
xd
x <- data.frame(cbind(x1 = 2, x2 = c(4:1, 2:5)))
xd <- x %>% mutate_all(log(.))
x <- data.frame(cbind(x1 = 2, x2 = c(4:1, 2:5)))
xd <- x %>% mutate_all(~ log(.))
xd
?mutate_all
x <- data.frame(cbind(x1 = 2, x2 = c(4:1, 2:5)))
xd <- x %>% mutate_all(~ log())
xd <- x %>% mutate_all(~ log(.))
xd
xd <- x %>% mutate_all(~ > 0)
bool_df = x.notnull()
?notnull
??notnull
x<0
df_x <0
df_x <- data.frame(x)
a <- colSums(df_x > 0)
a <- df_x < 0
View(a)
df_x <- data.frame(x)
a <- df_x < 0
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
df_x <- data.frame(x)
a <- df_x < 0
df_x <- data.frame(x)
a <- df_x < 0
View(a)
a <- df_x > 0
a <- rowSums(df_x > 0)
df_x <- data.frame(x)
a <- rowSums(df_x > 0)
a <- colSums(df_x > 0)
a <- c(colSums(df_x > 0))
a <- colSums(df_x > 0)
a
TRUE + TRUE
FALSE + FALSE
?colSums
a <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
View(anno)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
df_merge <- merge(df_x)
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
df_merge <- merge(df_x)
?merge
df_merge <- merge(df_x, df_x)
df_merge
anno %>% group_by_all() %>% count
anno %>% group_by_all()
anno %>% group_by_all() %>% count
reps <- anno %>% group_by_all() %>% count
reps
sum(reps$n)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
reps <- anno %>% group_by_all() %>% count # grouping by treatment / technology and count the replicates
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
reps <- anno %>% group_by_all() %>% count # grouping by treatment / technology and count the replicates
reps
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
r
reps
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
#| output: false
reps
#| echo: false
reps
reps <- data.frame(anno %>% group_by(pick) %>% count) # grouping by treatment / technology and count the replicates
reps <- data.frame(anno %>% group_by(pick(all)) %>% count) # grouping by treatment / technology and count the replicates
_all
#| echo: false
reps
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
#| echo: false
reps
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
df_x <- data.frame(x)
genes <- colSums(df_x > 0) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
#| echo: false
reps
genes
head(genes)
genes <- data.frame(colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
head(genes)
df_x <- data.frame(x)
genes <- data.frame(colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
head(genes)
View(genes)
genes <- data.frame(colSums(df_x > 0), "test") # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("#gene exp." > 0 =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("#gene exp. > 0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
head(genes)
head(genes)
df_x <- data.frame(x)
genes <- data.frame("#gene exp. > 0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
head(genes)
exp.
genes <- data.frame("gene exp " =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("geneexpression " =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("geneexpression" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("Gene expression > 0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("Gene expression \> 0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("num_gene_expr" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("num_gene_expr_bigger_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("num_gene_expr_<r_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
head(genes)
head(genes)
head(genes)
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
head(genes)
head(genes)
library(simplermarkdown)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(simplermarkdown)
knitr::kable(head(anno),format = "html") # output format specification is optional
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
knitr::kable(head(genes))
knitr::kable(genes)
counts <- data.frame("total_sum" =colSums(df_x))
counts
dftest <- data.frame("x1"=c(1:4), "x2"=c(5:11))
dftest <- data.frame("x1"=c(1:4), "x2"=c(5:9))
dftest <- data.frame("x1"=c(1:4), "x2"=c(5:8))
dftest
counts <- data.frame("total_sum" =colSums(dftest))
counts
dftest
counts <- data.frame("total_sum" =colSums(df_x))
knitr::kable(head(counts))
counts <- data.frame("total_reads_sum" =colSums(df_x))
counts <- data.frame("total_reads_sum" =colSums(df_x))
knitr::kable(head(counts))
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
# Scale the data so that the total sum of counts per sample is identical
normalized_df_x <- df_x / library_size
# Calculate the library size (total counts) for each sample
library_size <- colSums(df_x)
# Scale the data so that the total sum of counts per sample is identical
normalized_df_x <- df_x / library_size
View(normalized_df_x)
head(data.frame("total_counts_sum" =colSums(normalized_df_x)))
# Normalize the data by dividing each column (sample) by its scaling factor
normalized_gene_expression <- df_x * scaling_factors
# Assuming you have a gene expression matrix where rows are genes and columns are samples
# gene_expression <- your_gene_expression_matrix
# Calculate the total count for each sample
total_counts <- colSums(df_x)
# Calculate the scaling factor for each sample to make the total counts equal
scaling_factors <- median(total_counts) / total_counts
# Normalize the data by dividing each column (sample) by its scaling factor
normalized_gene_expression <- df_x * scaling_factors
# Now, 'normalized_gene_expression' contains your normalized data
# Now, 'normalized_gene_expression' contains your normalized data
colSums(normalized_gene_expression)
# Now, 'normalized_gene_expression' contains your normalized data
head(colSums(normalized_gene_expression))
scaled_df_x <- as.data.frame(scale(df_x))
colSums(scaled_df_x)
head(colSums(scaled_df_x))
df_x
counts
scaled_df_x <- df_x / counts
scaled_df_x <- df_x / data.frame(counts)
scaled_df_x <- df_x / colSums(df_x)
scaled_df_x
colSums(scaled_df_x)
scaled_df_x <- df_x / 2*colSums(df_x)
colSums(scaled_df_x)
df <- as.data.frame(t(matrix(seq(1,9), nrow = 3, ncol = 3)))
testdf <- as.data.frame(t(matrix(seq(1,9), nrow = 3, ncol = 3)))
testdf
colSums(testdf)
testdf/colSums(testdf)
colSums(testdf/colSums(testdf))
testdf/colSums(testdf)
colSums(testdf)
testdf
testdf/2
testdf
testdf/4
testdf
testdf
testdf <- as.data.frame(t(matrix(seq(1,9), nrow = 3, ncol = 3)))
testdf
testdf
testdf
testdf / colSums(testdf)
testdf / colSums(testdf)
testdf / colSums(testdf)
colSums(testdf)
testdf <- as.data.frame(matrix(c(1,1,1), c(2,2,2)))
testdf <- as.data.frame(matrix(c(1,1,1)))
testdf <- as.data.frame(matrix(cbind(c(1,1,1), c(2,2,2)))
testdf / colSums(testdf)
testdf <- as.data.frame(matrix(cbind(c(1,1,1), c(2,2,2)))
testdf
testdf
testdf <- data.frame("1"=c(1,1,1), "2"=c(2,2,2))
testdf <- data.frame("1"=c(1,1,1), "2"=c(2,2,2), "3"=c(3,3,3))
testdf
testcount <- c(1,2,3)
testcount <- c(1,2,3)
testdf/testcount
testcount <- c(1;2;3)
testcount <- c(1,2,3)
testdf <- data.frame("1"=c(1,1,1), "2"=c(2,2,2), "3"=c(3,3,3))
testcount <- c(1,2,3)
??sweep
sweep(testdf,2,testcount,FUN="/")
testcount <- colSums(testdf)
sweep(testdf,2,testcount,FUN="/")
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testcount <- colSums(testdf)
sweep(testdf,2,testcount,FUN="/")
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testcount <- colSums(testdf)
sweep(testdf,2,testcount,FUN="/")
normalized <- sweep(testdf,2,testcount,FUN="/")
colSums(normalized)
colSums(normalized_testdf)
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testcount <- colSums(testdf)
normalized_testdf <- sweep(testdf,2,testcount,FUN="/")
colSums(normalized_testdf)
normalized_testdf <- sweep(testdf,2,testcount,FUN="/")
normalized_testdf
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf)
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/")
normalized_testdf
colSums(normalized_testdf)
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf)
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/")
normalized_testdf
colSums(normalized_testdf)
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf)
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/")
normalized_testdf
colSums(normalized_testdf)
testdf
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
knitr::kable(head(genes)) # Overview over the first samples
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
knitr::kable(head(genes)) # Overview over the first samples
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
knitr::kable(head(genes)) # Overview over the first samples
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
knitr::kable(head(genes)) # Overview over the first samples
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
normalized_df_x <- sweep(df_x,2,colSums(df_x), FUN="/")
colSums(normalized_df_x)
View(normalized_testdf)
View(normalized_df_x)
normalized_df_x <- sweep(df_x,2,colSums(df_x), FUN="/")
knitr::kable(head(normalized_df_x))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
knitr::kable(head(genes)) # Overview over the first samples
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
normalized_df_x <- sweep(df_x,2,colSums(df_x), FUN="/")
knitr::kable(head(normalized_df_x))
knitr::kable(head(colSums(normalized_df_x)))
?log1p
log1p(1)
log1p(testdf)
log_normalized_df_x <- log1p(normalized_df_x)
log_normalized_df_x
View(anno)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
rep2 <- data.frame(anno %>% group_by_all()
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
rep2 <- data.frame(anno %>% group_by_all())
rep2
rep2 <- anno %>% group_by_all()
rep2
View(anno)
data <- ChickWeight
source("~/.active-rstudio-document", echo=TRUE)
data <- data.frame(ChickWeight)
source("~/.active-rstudio-document", echo=TRUE)
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
rep2 <- data.frame(anno %>% group_by_all())
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
knitr::kable(head(genes)) # Overview over the first samples
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
normalized_df_x <- sweep(df_x,2,colSums(df_x), FUN="/")
knitr::kable(head(colSums(normalized_df_x)))
log_normalized_df_x <- log1p(normalized_df_x)
View(anno)
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
#| echo: false
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps
rep2 <- data.frame(anno %>% group_by_all())
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
knitr::kable(head(genes)) # Overview over the first samples
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
normalized_df_x <- sweep(df_x,2,colSums(df_x), FUN="/")
knitr::kable(head(colSums(normalized_df_x)))
log_normalized_df_x <- log1p(normalized_df_x)
View(df_x)
View(anno)
