---
title: "Exercise 03"
author: "Jann St√§bler"
date: "02 10 2023"
format:
  html:
    self-contained: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
```

## Exploratory Data Analysis

Do an exploratory data analysis of a matrix of expression values. The data consists of expression values for samples that were treated with DMSO and TSA. The samples were measured using three technologies: bulk, IFC96, IFC800. See the two RDS files `counts.RDS` and `phenodata.RDS`.

The experiment has two experimental factors "Treatment" and "Technology". Treatment has two levels, Technology has three levels. Samples that have the same combination of Treatment & Technology are replicates.

## Data Import

```{r }
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)

```

## Compute and visualize basic statistics on the experimental design

How many replicates are there for each combination of factor levels? How many genes have an expression value above 0 in each sample? Are there systematic differences between the samples in the different conditions (treatment & technology). Visualize the following statistics per sample:

### Replicates

Samples and the numbers of the corresponding \# replicates:

```{r}
#| echo: false 
reps <- data.frame(anno %>% group_by_all() %>% count) # grouping by treatment / technology and count the replicates
reps 
rep2 <- data.frame(anno %>% group_by_all())
```

### Number of detected genes

```{r}
df_x <- data.frame(x)
genes <- data.frame("num_gene_expr_higher_0" =colSums(df_x > 0)) # the term in the bracket gives a boolean for each value, TRUE if > 0 and FALSE if < 0. colSums then adds the booleans for each column in the data frame (TRUE = +1, FALSE = +0). So the sum corresponds to values > 0.
```

Here are the first columns of the number of genes per sample with an expression value of \>0:

```{r}
knitr::kable(head(genes)) # Overview over the first samples
```

### Total sum of counts per sample (serves as a proxy for the number of sequenced reads per sample)

Here are the first columns of the number of total sum of counts per sample:

```{r}
counts <- data.frame("total_counts_sum" =colSums(df_x))
knitr::kable(head(counts))
```

*Color the samples by the experimental condition.*

## Normalize the data

### Scale the columns so that the total sum of all columns are identical

**First I try with a simple data frame to understand what is going on and to make sure nothing goes wrong with our big data frames:**

```{r}
testdf <- data.frame("1"=c(1,3,1), "2"=c(6,2,2), "3"=c(3,9,3))
testdf
testcount <- colSums(testdf) # again sums over the columns
testcount
normalized_testdf <- sweep(testdf,2,testcount,FUN="/") # now we divide each value by the corresponding sum of the column it is in
normalized_testdf
colSums(normalized_testdf) # now, each column should add up to 1
```

**Now with the real deal:**

```{r}
normalized_df_x <- sweep(df_x,2,colSums(df_x), FUN="/")
```

Fingers crossed that the colSums function of the now normalized data frame outputs 1 for each of the columns:

```{r}
knitr::kable(head(colSums(normalized_df_x)))
```

Yeah, looks good!\

## Transform the data to log-scale

Use the function `log1p` to transform the data to log-scale

```{r}
log_normalized_df_x <- log1p(normalized_df_x)
```

## Visualize the distribution of the expression values

Use violin plots and boxplots to visualize the distribution of the expression values. Aggregate the replicates in the same experimental group into one average sample, and plot the averaged sample. Color by experimental factors.

## Most variable genes

Identify the 500 most variable genes (with largest variance across samples) and continue working with those

## Sample correlations

Compute and visualize the sample-to-sample correlations

## Clustering

Compute and visualize a hierarchical clustering of the samples, use the method `hclust`

## Heatmap

Use the package `pheatmap` to generate a heatmap of the expression data.
